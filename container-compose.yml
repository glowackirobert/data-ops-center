services:
  zookeeper:
    image: ${ZK_IMAGE:-zookeeper:3.9.2}
    container_name: "zookeeper"
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - pinot-network
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: ${KAFKA_IMAGE:-bitnami/kafka:3.6}
    container_name: "kafka"
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181/kafka
      KAFKA_BROKER_ID: 0
      KAFKA_ADVERTISED_HOST_NAME: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - pinot-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions.sh -bootstrap-server kafka:9092" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      replicas: ${KAFKA_REPLICAS:-1}

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.5
    container_name: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    networks:
      - pinot-network
    restart: "no"
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/ || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  pinot-controller:
    image: ${localhost/custom-pinot:1.2.0:-apachepinot/pinot:1.2.0}
    command: "StartController -zkAddress zookeeper:2181"
    container_name: "pinot-controller"
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms1G -Xmx2G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc:gc-pinot-controller.log"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - pinot-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  pinot-broker:
    image: ${localhost/custom-pinot:1.2.0:-apachepinot/pinot:1.2.0}}
    command: "StartBroker -zkAddress zookeeper:2181"
    container_name: "pinot-broker"
    restart: unless-stopped
    ports:
      - "8099:8099"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms1G -Xmx2G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc:gc-pinot-broker.log"
    depends_on:
      pinot-controller:
        condition: service_healthy
    networks:
      - pinot-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8099/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  pinot-server:
    image: ${localhost/custom-pinot:1.2.0:-apachepinot/pinot:1.2.0}
    command: "StartServer -zkAddress zookeeper:2181"
    container_name: "pinot-server"
    restart: unless-stopped
    ports:
      - "8098:8098"
      - "8097:8097"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms2G -Xmx8G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc:gc-pinot-server.log"
    depends_on:
      pinot-broker:
        condition: service_healthy
    networks:
      - pinot-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8097/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  pinot-minion:
    image: ${localhost/custom-pinot:1.2.0:-apachepinot/pinot:1.2.0}
    command: "StartMinion -zkAddress zookeeper:2181"
    container_name: "pinot-minion"
    restart: unless-stopped
    ports:
      - "7500:7500"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms1G -Xmx2G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc:gc-pinot-minion.log"
    depends_on:
      pinot-server:
        condition: service_healthy
    networks:
      - pinot-network

  kafka-producer:
    image: localhost/kafka-producer:0.0.1-SNAPSHOT
    container_name: "kafka-producer"
    restart: no
    depends_on:
      pinot-server:
        condition: service_healthy
    networks:
      - pinot-network

networks:
  pinot-network:
    name: pinot-network
    driver: bridge
    external: true